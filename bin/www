#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('igp-assigment:server');
const http = require('http');
const jwt = require('jsonwebtoken');
const { initKafkaMessagesClient } = require('../functions/receiveMessage');
const config = require('config');

const socketServer = http.createServer();
const { WebSocketServer } = require('ws');
const logger = require('../functions/winston/winstonLogger');
const wss = new WebSocketServer({ noServer: true });

wss.on('connection', function connection(ws, request, client) {
  logger.info("New client connected", ws.info);
  ws.on('close', () => logger.info("Client has disconnected", ws.info));
  ws.onerror = function () {
    logger.error("Websocket error");
  }
});

socketServer.on('upgrade', function upgrade(request, socket, head) {
  socket.on('error', onSocketError);

  if(request.headers.authorization) {
    try {
      const token = jwt.verify(request.headers.authorization, config.get("SECRET"));
      const expiry = new Date();
      expiry.setTime(token.exp);
      if(token && expiry.getTime() > new Date().getTime()) {
        socket.removeListener('error', onSocketError);
    
        wss.handleUpgrade(request, socket, head, function done(ws) {
          ws.id = token.email;
          wss.emit('connection', ws, request);
        });
        return;
      }
    } catch (error) {
      logger.error("Websocket upgrade error", error);
    }
  }

  socket.write('HTTP/1.1 401 Unauthorized\r\n\r\n');
  socket.destroy();
});

function onSocketError(error) {
  logger.error("Websocket error", error);
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.get("PORT") || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

socketServer.listen(5005);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges', error);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use', error);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  await initKafkaMessagesClient(wss);
}
